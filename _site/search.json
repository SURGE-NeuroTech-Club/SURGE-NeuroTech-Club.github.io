[
  {
    "objectID": "who_we_are.html",
    "href": "who_we_are.html",
    "title": "Who We Are",
    "section": "",
    "text": "We are the Dalhousie/SURGE NeuroTech Club! The goal of the club is to help students with any level of neuroscience or coding experience get engaged and excited about NeuroTechnology!\nThe club is drop-in and completely free to attend! It runs once a week from 3-5pm on Thursdays in the LSC, Oceanography - Room O2660"
  },
  {
    "objectID": "who_we_are.html#directions",
    "href": "who_we_are.html#directions",
    "title": "Who We Are",
    "section": "Directions",
    "text": "Directions\nLife Sciences Building, Oceanography wing - Room O2660\nFrom the main entrance: go down the stairs and continue past the tim hortons until you see doors leading outside on your right. Go through them and enter the building directly across. Continue straight down the hallway until you see the bathrooms on your left, or the SURGE A-frame sign - then it’s the doors on your right!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "SURGE NeuroTech Club",
    "section": "",
    "text": "We are a community of neuro-enthusiasts dedicated to exploring, understanding, and innovating in the field of neurotechnology. Join us as we delve into this exciting frontier!\nWe meet every Thursday 3-5 pm in the SURGE room (LSC, Room O2660). If you can’t make the full time, no worries - feel free to drop by and check it out!\nIf you’re new to the club and don’t know where to begin, you can click on Get Started or, just ask one of the SURGE folks!"
  },
  {
    "objectID": "index.html#contact",
    "href": "index.html#contact",
    "title": "SURGE NeuroTech Club",
    "section": "Contact:",
    "text": "Contact:\nFor general inquiries, email us at: bciclub@dal.ca\nFor specific neurotech questions, please reach out to our programming specialists: Brynn or Max"
  },
  {
    "objectID": "docs/get-started/getting-setup/github_intro.html",
    "href": "docs/get-started/getting-setup/github_intro.html",
    "title": "Introduction to GitHub",
    "section": "",
    "text": "This guide will give you a basic introduction to GitHub and how to effectively use it! Before you get started here, make sure you already have a GitHub account setup. If you don’t head over to Getting Setup for instructions!"
  },
  {
    "objectID": "docs/get-started/getting-setup/github_intro.html#what-is-github",
    "href": "docs/get-started/getting-setup/github_intro.html#what-is-github",
    "title": "Introduction to GitHub",
    "section": "What is GitHub?",
    "text": "What is GitHub?\nGitHub is a web-based platform for version control and collaboration that allows developers to host and manage their code. It uses Git, a distributed version control system, to track changes in source code during software development. GitHub provides a range of features including issue tracking, project management, and code review tools."
  },
  {
    "objectID": "docs/get-started/getting-setup/github_intro.html#key-features-of-github",
    "href": "docs/get-started/getting-setup/github_intro.html#key-features-of-github",
    "title": "Introduction to GitHub",
    "section": "Key Features of GitHub",
    "text": "Key Features of GitHub\n\nRepositories: Storage spaces where your project files and their revision history are kept.\nCommits: Saved changes to files in a repository, allowing you to track modifications.\nBranches: Separate lines of development within a repository, useful for working on different features simultaneously.\nPull Requests: Proposals to merge changes from one branch to another, often used for code reviews and collaboration.\nIssues: Tools for tracking tasks, enhancements, and bugs in your projects."
  },
  {
    "objectID": "docs/get-started/getting-setup/github_intro.html#getting-started-with-github",
    "href": "docs/get-started/getting-setup/github_intro.html#getting-started-with-github",
    "title": "Introduction to GitHub",
    "section": "Getting Started with GitHub",
    "text": "Getting Started with GitHub\n\n1. Installing GitHub Desktop\n\nDownload GitHub Desktop from desktop.github.com if you don’t already have it installed.\nInstall GitHub Desktop following the instructions for your operating system.\n\n\n\n2. Cloning a Repository\nTo work on your project locally, clone the repository to your computer using GitHub Desktop.\n\nOpen GitHub Desktop.\nClick File &gt; Clone repository.\nSelect the repository you want to clone from the list or enter the URL of the repository.\nChoose the local path where you want to save the repository and click Clone.\n\nExplanation: Cloning a repository means creating a local copy of the repository on your computer, allowing you to work on it offline and sync your changes with the remote repository later.\n\n\n3. Creating a Branch\n99% of the time, you’ll want to work on a Branch. This effectively copies the code from main and allows you to work on it separately. This is great for a few reasons: - It avoids conflicts with overwriting which can happen when multiple people work on the same code in the same branch. - If you seriously break something and can’t figure out how to get it back - you can just pull from main!\nTo create a branch:\n\nSelect the repository you want to make a branch of.\nClick Current Branch &gt; New Branch.\nName the branch whatever you want (make sure to remember it!).\nSelect where you want the code to copy from (Main is the default branch, but you can copy the code from someone else’s branch too).\nClick Create Branch.\nMake sure the branch you just made is selected under Current Branch.\n\nExplanation: Branches allow you to develop features, fix bugs, or safely experiment with new ideas in isolation from the main codebase.\n\n\n4. Making Changes and Committing\n\nOpen the cloned repository in your preferred code editor and make changes to your files.\nGo back to GitHub Desktop. You will see your changes listed under Changes.\nAdd a summary and description for your commit in the Summary and Description fields.\nClick Commit to main (or your branch name if you are using a different one).\n\nExplanation: Committing saves your changes to the local repository, with a message describing what you did. This helps in keeping track of different versions of your code.\n\n\n5. Pushing Changes to GitHub\n\nAfter committing your changes, click Push origin at the top of GitHub Desktop to upload your commits to GitHub.\n\nExplanation: Pushing sends your committed changes to the remote repository on GitHub, making them available to others.\n\n\n6. Creating a Pull Request\nA pull request is a proposal to merge changes from one branch to another. It’s used for code review and collaboration before integrating changes into the main branch. Once you feel like you’ve implemented what you intended, you can make a pull request to merge your changes with the main (or another) branch.\n\nNavigate to your repository on GitHub.\nClick on the Pull requests tab.\nClick New pull request.\nSelect the branch you want to merge from and to.\nAdd a title and description for your pull request.\nClick Create pull request.\n\nExplanation: Pull requests facilitate discussion about your changes before they are merged into the main branch, ensuring code quality and collaboration."
  },
  {
    "objectID": "docs/get-started/getting-setup/github_intro.html#conclusion",
    "href": "docs/get-started/getting-setup/github_intro.html#conclusion",
    "title": "Introduction to GitHub",
    "section": "Conclusion",
    "text": "Conclusion\nGitHub is a powerful platform for version control and collaboration, enabling developers to work together on projects effectively. By creating repositories, making commits, and managing pull requests with GitHub Desktop, you can maintain a smooth and organized workflow.\nAnother great resource to check out is the NCIL Handbook’s section on GitHub"
  },
  {
    "objectID": "contact_us.html",
    "href": "contact_us.html",
    "title": "Contact Us",
    "section": "",
    "text": "Email us at: bciclub@dal.ca"
  },
  {
    "objectID": "docs/get-started/getting-setup/getting_setup.html",
    "href": "docs/get-started/getting-setup/getting_setup.html",
    "title": "Getting Setup",
    "section": "",
    "text": "This document will teach you how to setup your computer with GitHub, VSCode and a Virtual Environment so you can start working on python projects!"
  },
  {
    "objectID": "docs/get-started/getting-setup/getting_setup.html#step-1-setting-up-visual-studio-code",
    "href": "docs/get-started/getting-setup/getting_setup.html#step-1-setting-up-visual-studio-code",
    "title": "Getting Setup",
    "section": "Step 1: Setting up Visual Studio Code",
    "text": "Step 1: Setting up Visual Studio Code\n\n\nClick to learn more about VS Code! \n\n\nVisual Studio Code (often referred to as VS Code) is a free, open-source code editor developed by Microsoft. It’s lightweight, yet powerful, and supports development in multiple programming languages such as Python, JavaScript, Java, C++, and many more. VS Code features include syntax highlighting, intelligent code completion (IntelliSense), code refactoring, and debugging tools. It also supports Git for version control, has a built-in terminal for command-line operations, and a rich ecosystem of extensions for enhancing its functionality. It’s designed to be highly customizable, allowing users to change the editor’s theme, keyboard shortcuts, and preferences. VS Code is available for Windows, macOS, and Linux. It’s widely used by developers across the globe for both small and large scale projects.\n\n\n\nInstalling VSCode & Extensions\nFirst, you’ll want to download and install the latest version of Visual Studio Code. Make sure you download the correct version for your computer (Windows, Mac, Linux).\nFollow the steps in the dialog windows, and once installed, you next need to download some essential extensions. On the left side of the window, there will be a bar with some icons. Select the extensions icon:  From there, search for and install the following: (Or just click the links below and hit ‘install’)\n\nGitHub Copilot & GitHub Copilot Chat\nPython\nJupyter\nAny others that seem interesting or useful :)\n\nFor more information on how to use VSCode, see the resources at the bottom of this page"
  },
  {
    "objectID": "docs/get-started/getting-setup/getting_setup.html#step-2-setting-up-github",
    "href": "docs/get-started/getting-setup/getting_setup.html#step-2-setting-up-github",
    "title": "Getting Setup",
    "section": "Step 2: Setting up GitHub",
    "text": "Step 2: Setting up GitHub\n\n\nClick to learn more about GitHub! \n\n\nGitHub is a web-based platform used for version control and collaboration. It allows multiple people to work on projects at once without overwriting each other’s changes. GitHub is built on Git, a distributed version control system that tracks changes to files. With GitHub, you can manage and store revisions of projects, share your code with others, view and track changes, and even revert back to previous versions of your code. It’s widely used by software developers for personal projects, open-source projects, and team-based enterprise software development.\n\n\n\nMaking Your Account\nHead over to GitHub.com and make an account if you don’t already have one. Make sure you use your Dalhousie email when signing up as this will allow you to sign up for the student developer pack which gives you access to AI tools like GitHub Copilot!\n\n\nGetting Student Perks\nOnce you’ve made and verified your account, head over to the GitHub Student Developer Pack Application. Make sure Student is selected, and then scroll down to the bottom of the page.\nIf you signed up with your Dalhousie email address, it should automatically detect Dalhousie University as your school. Click Select this School, and then Continue. If you don’t see this, enter your Dalhousie email address and verify it now. Note: Your browser may prompt you to share your location, this is required and you will not be allowed to continue until you agree.\n\n\n\n\n\nOn the next page, you will have to take a picture of your Dalhousie Student ID (I reccomend using your laptop webcam for simplicity), and upload it. Note: The website says you need to have an expiration date on your card, but since Dal student ID’s don’t have one you should be fine. If it keeps giving you errors, ask someone for assistance :)\n\n\n\n\n\n\nThis step can be a bit tricky and students sometimes get errors saying they require 2FA (2-factor authentication), in which case you will need to add your phone number or some other 2FA to your github account. If you have tried to troubleshoot on your own and keep getting stuck, just swing by the club and ask one of the SURGE folks - we’re happy to assist :)\n\nAfter you have completed the GitHub setup, you will get an email in a few hours/days saying that your application has been accepted. Once you receive this, you can open VSCode up, find the GitHub Copilot extensions and log into them. Now you have access to a powerful AI that can help you understand and write code!\n\n\nInstalling GitHub Desktop\nFinally, you will need to install GitHub Desktop. This application provides a friendly user-interface to work on GitHub repositories without having to learn the git bash (command line). Install that and log into your GitHub account.\nOnce this is done we highly reccomend you check out some further tutorials on what GitHub is, and how to effectively use it! There is a mini introduction to GitHub here, as well as other great resources at the bottom of this page"
  },
  {
    "objectID": "docs/get-started/getting-setup/getting_setup.html#step-3-setting-up-a-virtual-environment",
    "href": "docs/get-started/getting-setup/getting_setup.html#step-3-setting-up-a-virtual-environment",
    "title": "Getting Setup",
    "section": "Step 3: Setting up a Virtual Environment",
    "text": "Step 3: Setting up a Virtual Environment\n\n\nClick to learn more about Virtual Environments & Miniforge! \n\n\nVirtual environments are isolated spaces for installing and managing packages and dependencies for specific projects without affecting the global Python environment. They offer isolation, precise dependency management, portability, and a cleaner global environment. Virtual environments can be created using tools like venv or virtualenv in Python or Conda’s environment management features. By activating a virtual environment, users can install packages specific to that project, ensuring consistency and avoiding conflicts with other projects. This approach is essential for maintaining project-specific dependencies and ensuring reproducible and stable development environments.\n\n\nMiniforge3 is a minimalistic distribution of Conda, an open-source package and environment management system widely used in data science and software development. It provides a lightweight, cross-platform tool that supports multiple CPU architectures, making it versatile for different hardware and operating systems. Miniforge3 allows users to install packages from sources like conda-forge, ensuring access to a broad range of up-to-date software. Its primary strength lies in environment management, enabling the creation of isolated environments with specific dependencies, thereby avoiding conflicts and ensuring project stability.\n\n\n\nInstalling Miniforge3\nNext we need to get a python virtual environment setup so you can start coding! A virtual environment is an isolated workspace on a computer that allows projects to have their own dependencies and configurations, preventing conflicts and ensuring consistent and reproducible development and deployment. It is essential for managing multiple projects with different requirements on the same machine.\nTo start, head over to the conda/miniforge website and scroll down to download the version that matches your machine (windows, mac, linux, etc.)\nNext, open the installer and follow the steps. It isn’t necessary, but I reccomend selecting Install for all Users. Once the installation is complete you should be able to find a program called “Miniforge Prompt” or “Miniforge3” on your desktop or by searching for it.\n\n\nSetting Up Your Environment\nThe next step involved you cloning a repository to your computer so make sure you have your GitHub account & GitHub Desktop setup. In the GitHub Desktop App, in the top left, click on Current Repository &gt; Add &gt; Clone Existing Repository. Now either find the repository called “SURGE-NeuroTech-Club/virtual-environments” or if you can’t find it, click on URL and paste in: SURGE-NeuroTech-Club/virtual-environments. Before clicking Clone, copy the location of the folder it will clone to - you’ll need it soon.\nNext, you’ll want to open your Miniforge3 Prompt and use the cd command to change to the directory to where you cloned the repository. For example, type: cd \"the location to the repository you coppied\". If you aren’t sure where you cloned the repository, you can click on this button  in the GitHub desktop app and copy the path.\nYou will know you’re in the right directory when it reads something along the lines of: (base) C:\\..\\..\\virtual-environments. Once you see this, type in: mamba env create -f ncil.yml. This will read the list of libraries and packages within the ncil.yml file and begin to download and install them into a virtual environment for you. You may be prompted to answer Yes/No (Y/N) at some points during the installation process.\nOnce the install is complete, you can check that it worked by typing in: mamba activate ncil. This should change from (base) C:\\etc... to (ncil) C:\\etc....\n\n\nUsing Your Virtual Environment in VSCode\nNow that you have installed your virtual environment, you can use it in VSCode! To do this, all you have to do is open up VSCode and hit ctrl+shift+p (command+shift+p on mac), and type: Python: Select Interpreter. Then from the drop-down menu you should be able to see “Python 3.12.2 (‘ncil’)” and tada you can now execute python scripts using your brand-new virtual environment!"
  },
  {
    "objectID": "docs/get-started/getting-setup/getting_setup.html#additional-resources",
    "href": "docs/get-started/getting-setup/getting_setup.html#additional-resources",
    "title": "Getting Setup",
    "section": "Additional Resources",
    "text": "Additional Resources\nThe NCIL Lab Handbook has many great resources - Data Science Tools\nVSCode:\n\nIntroduction to VSCode\n\nGitHub:\n\nIntroduction to GitHub\nNCIL Introduction to GitHub"
  },
  {
    "objectID": "docs/get-started/index.html",
    "href": "docs/get-started/index.html",
    "title": "Welcome to the Get Started Landing Page!",
    "section": "",
    "text": "Welcome to the Get Started Landing Page!\n\nIf you’re brand new and want to get your computer setup to start working on programming projects, head over to Getting Setup.\nTo check out our tutorial (WIP) head over to Tutorials\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGetting Setup\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIntroduction to GitHub\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "site_info.html",
    "href": "site_info.html",
    "title": "Official Website of SURGE Innovation’s NeuroTech Club",
    "section": "",
    "text": "This is the official website of SURGE Innovation’s NeuroTech Club hosted by Dalhousie University\nWebsite made using Quarto & hosted via Github pages"
  },
  {
    "objectID": "docs/tutorials/open-bci/open-bci-setup.html",
    "href": "docs/tutorials/open-bci/open-bci-setup.html",
    "title": "Getting Started with OpenBCI",
    "section": "",
    "text": "This tutorial will take you through the steps of getting you OpenBCI board up and streaming EEG signals!"
  },
  {
    "objectID": "docs/tutorials/open-bci/open-bci-setup.html#installing-the-software",
    "href": "docs/tutorials/open-bci/open-bci-setup.html#installing-the-software",
    "title": "Getting Started with OpenBCI",
    "section": "Installing The Software",
    "text": "Installing The Software\nFirst, you will have to download the latest version of the OpenBCI GUI (graphical user interface) Make sure to download the correct version for your machine! (windows, mac, or linux).\nOne you have downloaded it, unzip it and move the folder somewhere you will remember! &gt; The GUI doesn’t ‘install’ so you will have to open the folder to start the program\nOnce you open the application OpenBCI_GUI, you should see something like this: \nIf you see the red bar at the bottom that reads ‘This Application is Not being run with Admin Access…’, close it and restart it as an administrator (right click &gt; Run As Administrator &gt; Yes)\nIf you run into trouble or errors not mentioned here, check out the official GUI documentation (or ask one of the SURGE folks!)"
  },
  {
    "objectID": "docs/tutorials/open-bci/open-bci-setup.html#connecting-to-your-board",
    "href": "docs/tutorials/open-bci/open-bci-setup.html#connecting-to-your-board",
    "title": "Getting Started with OpenBCI",
    "section": "Connecting To Your Board",
    "text": "Connecting To Your Board\nIf at any point something doesn’t work or make sense - check out the official documentation on getting your cyton board setup!\nMake sure you have your Cyton Board, Dongle, and Battery Pack with 4 AA batteries. \nThere is a tiny switch on the side of the cyton board:  - make sure it is in the ‘off’ position (middle) before pluggin in the battery.\nOnce the switch is set to ‘off’, you may plug in the battery pack  and change the switch position to ‘PC’. If you do not see a blue light on the board once you switch it to ‘PC’, the batteries need to be replaced.\nNext, look for the switch on the USB dongle and **make sure the switch is on ‘GPIO 6’ - towards the plug-end before pluggin it into your computer."
  },
  {
    "objectID": "docs/tutorials/open-bci/open-bci-setup.html#more-information-references",
    "href": "docs/tutorials/open-bci/open-bci-setup.html#more-information-references",
    "title": "Getting Started with OpenBCI",
    "section": "More Information & References",
    "text": "More Information & References\nOpenBCI GUI Reference"
  }
]